
RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  00000638  2**0
                  ALLOC
  3 .stab         00000f30  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000020f  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00001778  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068d  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f0  00000000  00000000  00001ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000577  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  0000260c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ea  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  00002892  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8a:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z11RecieveUARTv>:
#include <math.h>
#include <avr/io.h> 

unsigned char RecieveUART(void)
{
	while (! (UCSRA & (1 << RXC)) );
  92:	5f 9b       	sbis	0x0b, 7	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <_Z11RecieveUARTv>
	return UDR;
  96:	8c b1       	in	r24, 0x0c	; 12
}
  98:	08 95       	ret

0000009a <_Z12TransmitUARTh>:

void TransmitUART(unsigned char data)
{
	while (! (UCSRA & (1 << UDRE)) );
  9a:	5d 9b       	sbis	0x0b, 5	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <_Z12TransmitUARTh>
	UDR =data;
  9e:	8c b9       	out	0x0c, r24	; 12
}
  a0:	08 95       	ret

000000a2 <_Z14initialiseUARTiccccc>:


initialiseUART (int baud,char AsyncDoubleSpeed,char DataSizesInBits,char ParityEvenOrOdd,char StopBits,char USARTinterruptEnable)
{
  a2:	ef 92       	push	r14
  a4:	0f 93       	push	r16
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	d6 2f       	mov	r29, r22
  ae:	c4 2f       	mov	r28, r20
  b0:	12 2f       	mov	r17, r18
	uint16_t UBRRValue = lrint((F_CPU /(16L * baud)) - 1) ;
  b2:	aa 27       	eor	r26, r26
  b4:	97 fd       	sbrc	r25, 7
  b6:	a0 95       	com	r26
  b8:	ba 2f       	mov	r27, r26
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	aa 1f       	adc	r26, r26
  c0:	bb 1f       	adc	r27, r27
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	aa 1f       	adc	r26, r26
  c8:	bb 1f       	adc	r27, r27
  ca:	9c 01       	movw	r18, r24
  cc:	ad 01       	movw	r20, r26
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	44 1f       	adc	r20, r20
  d4:	55 1f       	adc	r21, r21
  d6:	22 0f       	add	r18, r18
  d8:	33 1f       	adc	r19, r19
  da:	44 1f       	adc	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	60 e4       	ldi	r22, 0x40	; 64
  e0:	72 e4       	ldi	r23, 0x42	; 66
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 ae 02 	call	0x55c	; 0x55c <__udivmodsi4>
  ea:	ca 01       	movw	r24, r20
  ec:	b9 01       	movw	r22, r18
  ee:	61 50       	subi	r22, 0x01	; 1
  f0:	70 40       	sbci	r23, 0x00	; 0
  f2:	80 40       	sbci	r24, 0x00	; 0
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	0e 94 0e 02 	call	0x41c	; 0x41c <__floatunsisf>
  fa:	0e 94 4b 02 	call	0x496	; 0x496 <lrint>
  fe:	86 2f       	mov	r24, r22
	
	if (AsyncDoubleSpeed==1) UCSRA = (1 << U2X); //setting the U2X bit to 1 for double speed asynchronous
 100:	d1 30       	cpi	r29, 0x01	; 1
 102:	19 f4       	brne	.+6      	; 0x10a <_Z14initialiseUARTiccccc+0x68>
 104:	92 e0       	ldi	r25, 0x02	; 2
 106:	9b b9       	out	0x0b, r25	; 11
 108:	03 c0       	rjmp	.+6      	; 0x110 <_Z14initialiseUARTiccccc+0x6e>
	if (AsyncDoubleSpeed==0) UCSRA &= ~(1 << U2X); //setting the U2X bit to 0 for normal asynchronous
 10a:	dd 23       	and	r29, r29
 10c:	09 f4       	brne	.+2      	; 0x110 <_Z14initialiseUARTiccccc+0x6e>
 10e:	59 98       	cbi	0x0b, 1	; 11
	
		//Put the upper part of the baud number here (bits 8 to 11)
		UBRRH = (unsigned char) (UBRRValue >> 8);
 110:	70 bd       	out	0x20, r23	; 32

		//Put the remaining part of the baud number here
		UBRRL = (unsigned char) UBRRValue;
 112:	89 b9       	out	0x09, r24	; 9

		//Enable the receiver and transmitter
		UCSRB = (1 << RXEN) | (1 << TXEN);
 114:	88 e1       	ldi	r24, 0x18	; 24
 116:	8a b9       	out	0x0a, r24	; 10
		
		//Enable interrupt on transmit and receive
		if(USARTinterruptEnable==1) UCSRB |= (1<<RXCIE) |(1<<TXCIE);
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	e8 16       	cp	r14, r24
 11c:	19 f4       	brne	.+6      	; 0x124 <_Z14initialiseUARTiccccc+0x82>
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	80 6c       	ori	r24, 0xC0	; 192
 122:	8a b9       	out	0x0a, r24	; 10
	
	if(StopBits==2) UCSRC |= (1 << USBS); //Sets 2 stop bits
 124:	02 30       	cpi	r16, 0x02	; 2
 126:	19 f4       	brne	.+6      	; 0x12e <_Z14initialiseUARTiccccc+0x8c>
 128:	80 b5       	in	r24, 0x20	; 32
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	80 bd       	out	0x20, r24	; 32
	
	if (ParityEvenOrOdd==EVEN) UCSRC |= (1 << UPM1); //Sets parity to EVEN
 12e:	11 23       	and	r17, r17
 130:	21 f4       	brne	.+8      	; 0x13a <_Z14initialiseUARTiccccc+0x98>
 132:	80 b5       	in	r24, 0x20	; 32
 134:	80 62       	ori	r24, 0x20	; 32
 136:	80 bd       	out	0x20, r24	; 32
 138:	05 c0       	rjmp	.+10     	; 0x144 <_Z14initialiseUARTiccccc+0xa2>
	if (ParityEvenOrOdd==ODD) UCSRC |= (3 << UPM0); //Sets parity to ODD
 13a:	11 30       	cpi	r17, 0x01	; 1
 13c:	19 f4       	brne	.+6      	; 0x144 <_Z14initialiseUARTiccccc+0xa2>
 13e:	80 b5       	in	r24, 0x20	; 32
 140:	80 63       	ori	r24, 0x30	; 48
 142:	80 bd       	out	0x20, r24	; 32
		
	if (DataSizesInBits==6) UCSRC |= (1 << UCSZ0); //6-bit data length
 144:	c6 30       	cpi	r28, 0x06	; 6
 146:	21 f4       	brne	.+8      	; 0x150 <_Z14initialiseUARTiccccc+0xae>
 148:	80 b5       	in	r24, 0x20	; 32
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	80 bd       	out	0x20, r24	; 32
 14e:	0c c0       	rjmp	.+24     	; 0x168 <_Z14initialiseUARTiccccc+0xc6>
	if (DataSizesInBits==7) UCSRC |= (2 << UCSZ0); //Alternative code for 7-bit data length
 150:	c7 30       	cpi	r28, 0x07	; 7
 152:	21 f4       	brne	.+8      	; 0x15c <_Z14initialiseUARTiccccc+0xba>
 154:	80 b5       	in	r24, 0x20	; 32
 156:	84 60       	ori	r24, 0x04	; 4
 158:	80 bd       	out	0x20, r24	; 32
 15a:	0b c0       	rjmp	.+22     	; 0x172 <_Z14initialiseUARTiccccc+0xd0>
	if (DataSizesInBits==8) UCSRC |= (3 << UCSZ0); //Alternative code for 8-bit data length
 15c:	c8 30       	cpi	r28, 0x08	; 8
 15e:	21 f4       	brne	.+8      	; 0x168 <_Z14initialiseUARTiccccc+0xc6>
 160:	80 b5       	in	r24, 0x20	; 32
 162:	86 60       	ori	r24, 0x06	; 6
 164:	80 bd       	out	0x20, r24	; 32
 166:	05 c0       	rjmp	.+10     	; 0x172 <_Z14initialiseUARTiccccc+0xd0>
	if (DataSizesInBits==9) UCSRC |= (7 << UCSZ0); //Alternative code for 9-bit data length
 168:	c9 30       	cpi	r28, 0x09	; 9
 16a:	19 f4       	brne	.+6      	; 0x172 <_Z14initialiseUARTiccccc+0xd0>
 16c:	80 b5       	in	r24, 0x20	; 32
 16e:	8e 60       	ori	r24, 0x0E	; 14
 170:	80 bd       	out	0x20, r24	; 32
	
}
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	1f 91       	pop	r17
 178:	0f 91       	pop	r16
 17a:	ef 90       	pop	r14
 17c:	08 95       	ret

0000017e <main>:
uint8_t speed[2];
uint8_t intensity[2];

int main(void)
{
	DDRA = 0xFF;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	8a bb       	out	0x1a, r24	; 26
	PORTA= 0x00;
 182:	1b ba       	out	0x1b, r1	; 27
	DDRD = 0b00110000;
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	81 bb       	out	0x11, r24	; 17
	PORTD= 0b00001000;
 188:	88 e0       	ldi	r24, 0x08	; 8
 18a:	82 bb       	out	0x12, r24	; 18
	initialiseUART(2400,0,8,ODD,2,0);
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	99 e0       	ldi	r25, 0x09	; 9
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	48 e0       	ldi	r20, 0x08	; 8
 194:	21 e0       	ldi	r18, 0x01	; 1
 196:	02 e0       	ldi	r16, 0x02	; 2
 198:	ee 24       	eor	r14, r14
 19a:	0e 94 51 00 	call	0xa2	; 0xa2 <_Z14initialiseUARTiccccc>
	
	/////////
	GICR |= (1<<INT1);
 19e:	8b b7       	in	r24, 0x3b	; 59
 1a0:	80 68       	ori	r24, 0x80	; 128
 1a2:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC10) | (1<<ISC11);
 1a4:	85 b7       	in	r24, 0x35	; 53
 1a6:	8c 60       	ori	r24, 0x0C	; 12
 1a8:	85 bf       	out	0x35, r24	; 53
	TCNT1 = 0;
 1aa:	1d bc       	out	0x2d, r1	; 45
 1ac:	1c bc       	out	0x2c, r1	; 44
	TCCR1A |= (1<<WGM11) |(1<<COM1A0)|(1<<COM1A1)|(1<<COM1B0)|(1<<COM1B1);
 1ae:	8f b5       	in	r24, 0x2f	; 47
 1b0:	82 6f       	ori	r24, 0xF2	; 242
 1b2:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) |(1<<WGM13) |(1<<CS10);
 1b4:	8e b5       	in	r24, 0x2e	; 46
 1b6:	89 61       	ori	r24, 0x19	; 25
 1b8:	8e bd       	out	0x2e, r24	; 46
	//TIMSK |= (1<<OCIE1A);
	ICR1=19999;
 1ba:	8f e1       	ldi	r24, 0x1F	; 31
 1bc:	9e e4       	ldi	r25, 0x4E	; 78
 1be:	97 bd       	out	0x27, r25	; 39
 1c0:	86 bd       	out	0x26, r24	; 38
	OCR1A=1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	9b bd       	out	0x2b, r25	; 43
 1c8:	8a bd       	out	0x2a, r24	; 42
	OCR1B=1;
 1ca:	99 bd       	out	0x29, r25	; 41
 1cc:	88 bd       	out	0x28, r24	; 40
	sei();
 1ce:	78 94       	sei
				while (! (UCSRA & (1 << RXC)) );
				data1 = UDR;
				
				if (data1==0xBB)
				{
					PORTA = (1<<PINA6);
 1d0:	90 e4       	ldi	r25, 0x40	; 64
	OCR1B=1;
	sei();
	////////
	while(1)
	{
		while (! (UCSRA & (1 << RXC)) );
 1d2:	5f 9b       	sbis	0x0b, 7	; 11
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <main+0x54>
		data1 = UDR;
 1d6:	8c b1       	in	r24, 0x0c	; 12
 1d8:	80 93 66 00 	sts	0x0066, r24
				
		if (data1==0xAE)
 1dc:	8e 3a       	cpi	r24, 0xAE	; 174
 1de:	c9 f7       	brne	.-14     	; 0x1d2 <main+0x54>
		{			
			while (! (UCSRA & (1 << RXC)) );
 1e0:	5f 9b       	sbis	0x0b, 7	; 11
 1e2:	fe cf       	rjmp	.-4      	; 0x1e0 <main+0x62>
			data1 = UDR;
 1e4:	8c b1       	in	r24, 0x0c	; 12
 1e6:	80 93 66 00 	sts	0x0066, r24
			
			if (data1==0xAA)
 1ea:	8a 3a       	cpi	r24, 0xAA	; 170
 1ec:	91 f7       	brne	.-28     	; 0x1d2 <main+0x54>
			{
				while (! (UCSRA & (1 << RXC)) );
 1ee:	5f 9b       	sbis	0x0b, 7	; 11
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <main+0x70>
				data1 = UDR;
 1f2:	8c b1       	in	r24, 0x0c	; 12
 1f4:	80 93 66 00 	sts	0x0066, r24
				
				if (data1==0xBB)
 1f8:	8b 3b       	cpi	r24, 0xBB	; 187
 1fa:	11 f4       	brne	.+4      	; 0x200 <main+0x82>
				{
					PORTA = (1<<PINA6);
 1fc:	9b bb       	out	0x1b, r25	; 27
 1fe:	e9 cf       	rjmp	.-46     	; 0x1d2 <main+0x54>
				}					
			
				
				else
				if (data1==0xCC)
 200:	8c 3c       	cpi	r24, 0xCC	; 204
 202:	39 f7       	brne	.-50     	; 0x1d2 <main+0x54>
				{
					PORTA |= (1<<PINA3)|(1<<PINA4)|(1<<PINA5);
 204:	8b b3       	in	r24, 0x1b	; 27
 206:	88 63       	ori	r24, 0x38	; 56
 208:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	8f e9       	ldi	r24, 0x9F	; 159
 20c:	96 e8       	ldi	r25, 0x86	; 134
 20e:	a1 e0       	ldi	r26, 0x01	; 1
 210:	81 50       	subi	r24, 0x01	; 1
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	a0 40       	sbci	r26, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <main+0x92>
 218:	00 c0       	rjmp	.+0      	; 0x21a <main+0x9c>
 21a:	00 00       	nop
					_delay_ms(500);
					PORTA &=~ (1<<PINA3);
 21c:	db 98       	cbi	0x1b, 3	; 27
					PORTA &=~ (1<<PINA4);
 21e:	dc 98       	cbi	0x1b, 4	; 27
					PORTA &=~ (1<<PINA5);
 220:	dd 98       	cbi	0x1b, 5	; 27
											////////// THE ZONE
											while(3)
											{
												if (data_main == 0x0C)
												{
													 PORTA ^= (1<<PINA0);
 222:	51 e0       	ldi	r21, 0x01	; 1
												}
												
												else													  
												if (data_main == 0x0D) 
												{
													PORTA ^= (1<<PINA1);
 224:	02 e0       	ldi	r16, 0x02	; 2
													PORTA ^= (1<<PINA4);
 226:	10 e1       	ldi	r17, 0x10	; 16
												}
												
												else 
												if (data_main == 0x0E)  
												{
													PORTA ^= (1<<PINA2);
 228:	d4 e0       	ldi	r29, 0x04	; 4
													PORTA ^= (1<<PINA5);
 22a:	c0 e2       	ldi	r28, 0x20	; 32
												
												else
												if (data_main == 0x0A)
												{
													z=1;
													speed[0]=1;
 22c:	a2 e6       	ldi	r26, 0x62	; 98
 22e:	b0 e0       	ldi	r27, 0x00	; 0
												
												else
												if (data_main == 0x0B)
												{
													z=1;
													intensity[0]=1;
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	90 e0       	ldi	r25, 0x00	; 0
												
												else
												if (data_main == 0xB0)
												{
													z=1;
													intensity[1]=1;
 234:	21 e6       	ldi	r18, 0x61	; 97
 236:	30 e0       	ldi	r19, 0x00	; 0
								while (! (UCSRA & (1 << RXC)) );
								data1 = UDR;
							
								if (data1==0xBB)
								{
									PORTA = (1<<PINA6);
 238:	70 e4       	ldi	r23, 0x40	; 64
					PORTA &=~ (1<<PINA5);
					
					LOOP:
					while(2)
					{
						while (! (UCSRA & (1 << RXC)) );
 23a:	5f 9b       	sbis	0x0b, 7	; 11
 23c:	fe cf       	rjmp	.-4      	; 0x23a <main+0xbc>
						data1 = UDR;
 23e:	4c b1       	in	r20, 0x0c	; 12
 240:	40 93 66 00 	sts	0x0066, r20
						
						if (data1==0xAE)
 244:	4e 3a       	cpi	r20, 0xAE	; 174
 246:	c9 f7       	brne	.-14     	; 0x23a <main+0xbc>
						{
							while (! (UCSRA & (1 << RXC)) );
 248:	5f 9b       	sbis	0x0b, 7	; 11
 24a:	fe cf       	rjmp	.-4      	; 0x248 <main+0xca>
							data1 = UDR;
 24c:	4c b1       	in	r20, 0x0c	; 12
 24e:	40 93 66 00 	sts	0x0066, r20
							
							if (data1==0xDD)
 252:	4d 3d       	cpi	r20, 0xDD	; 221
 254:	09 f0       	breq	.+2      	; 0x258 <main+0xda>
 256:	53 c0       	rjmp	.+166    	; 0x2fe <main+0x180>
							{
								while (! (UCSRA & (1 << RXC)) );
 258:	5f 9b       	sbis	0x0b, 7	; 11
 25a:	fe cf       	rjmp	.-4      	; 0x258 <main+0xda>
								data1 = UDR;
 25c:	4c b1       	in	r20, 0x0c	; 12
 25e:	40 93 66 00 	sts	0x0066, r20
								
								if (data1==0xDD)
 262:	4d 3d       	cpi	r20, 0xDD	; 221
 264:	51 f7       	brne	.-44     	; 0x23a <main+0xbc>
								{
									while (! (UCSRA & (1 << RXC)) );
 266:	5f 9b       	sbis	0x0b, 7	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <main+0xe8>
									data_main = UDR;
 26a:	4c b1       	in	r20, 0x0c	; 12
 26c:	40 93 65 00 	sts	0x0065, r20
									
									while (! (UCSRA & (1 << RXC)) );
 270:	5f 9b       	sbis	0x0b, 7	; 11
 272:	fe cf       	rjmp	.-4      	; 0x270 <main+0xf2>
									data1=UDR;
 274:	6c b1       	in	r22, 0x0c	; 12
 276:	60 93 66 00 	sts	0x0066, r22
									
									if (data1==0xEE)
 27a:	6e 3e       	cpi	r22, 0xEE	; 238
 27c:	f1 f6       	brne	.-68     	; 0x23a <main+0xbc>
									{
										while (! (UCSRA & (1 << RXC)) );
 27e:	5f 9b       	sbis	0x0b, 7	; 11
 280:	fe cf       	rjmp	.-4      	; 0x27e <main+0x100>
										data1=UDR;
 282:	6c b1       	in	r22, 0x0c	; 12
 284:	60 93 66 00 	sts	0x0066, r22
										
										if (data1==0xEE)
 288:	6e 3e       	cpi	r22, 0xEE	; 238
 28a:	b9 f6       	brne	.-82     	; 0x23a <main+0xbc>
										{
											////////// THE ZONE
											while(3)
											{
												if (data_main == 0x0C)
 28c:	4c 30       	cpi	r20, 0x0C	; 12
 28e:	69 f0       	breq	.+26     	; 0x2aa <main+0x12c>
													 PORTA ^= (1<<PINA3);
													 goto LOOP;
												}
												
												else													  
												if (data_main == 0x0D) 
 290:	4d 30       	cpi	r20, 0x0D	; 13
 292:	99 f0       	breq	.+38     	; 0x2ba <main+0x13c>
													PORTA ^= (1<<PINA4);
													goto LOOP;
												}
												
												else 
												if (data_main == 0x0E)  
 294:	4e 30       	cpi	r20, 0x0E	; 14
 296:	c1 f0       	breq	.+48     	; 0x2c8 <main+0x14a>
													PORTA ^= (1<<PINA5);
													goto LOOP;
												}
												
												else
												if (data_main == 0x0A)
 298:	4a 30       	cpi	r20, 0x0A	; 10
 29a:	e9 f0       	breq	.+58     	; 0x2d6 <main+0x158>
													speed[0]=1;
													goto LOOP;
												}
												
												else
												if (data_main == 0xA0)
 29c:	40 3a       	cpi	r20, 0xA0	; 160
 29e:	f9 f0       	breq	.+62     	; 0x2de <main+0x160>
													speed[1]=1;
													goto LOOP;
												}
												
												else
												if (data_main == 0x0B)
 2a0:	4b 30       	cpi	r20, 0x0B	; 11
 2a2:	19 f1       	breq	.+70     	; 0x2ea <main+0x16c>
													intensity[0]=1;
													goto LOOP;
												}
												
												else
												if (data_main == 0xB0)
 2a4:	40 3b       	cpi	r20, 0xB0	; 176
 2a6:	31 f1       	breq	.+76     	; 0x2f4 <main+0x176>
 2a8:	37 c0       	rjmp	.+110    	; 0x318 <main+0x19a>
											////////// THE ZONE
											while(3)
											{
												if (data_main == 0x0C)
												{
													 PORTA ^= (1<<PINA0);
 2aa:	4b b3       	in	r20, 0x1b	; 27
 2ac:	45 27       	eor	r20, r21
 2ae:	4b bb       	out	0x1b, r20	; 27
													 PORTA ^= (1<<PINA3);
 2b0:	4b b3       	in	r20, 0x1b	; 27
 2b2:	e8 e0       	ldi	r30, 0x08	; 8
 2b4:	4e 27       	eor	r20, r30
 2b6:	4b bb       	out	0x1b, r20	; 27
													 goto LOOP;
 2b8:	c0 cf       	rjmp	.-128    	; 0x23a <main+0xbc>
												}
												
												else													  
												if (data_main == 0x0D) 
												{
													PORTA ^= (1<<PINA1);
 2ba:	4b b3       	in	r20, 0x1b	; 27
 2bc:	40 27       	eor	r20, r16
 2be:	4b bb       	out	0x1b, r20	; 27
													PORTA ^= (1<<PINA4);
 2c0:	4b b3       	in	r20, 0x1b	; 27
 2c2:	41 27       	eor	r20, r17
 2c4:	4b bb       	out	0x1b, r20	; 27
													goto LOOP;
 2c6:	b9 cf       	rjmp	.-142    	; 0x23a <main+0xbc>
												}
												
												else 
												if (data_main == 0x0E)  
												{
													PORTA ^= (1<<PINA2);
 2c8:	4b b3       	in	r20, 0x1b	; 27
 2ca:	4d 27       	eor	r20, r29
 2cc:	4b bb       	out	0x1b, r20	; 27
													PORTA ^= (1<<PINA5);
 2ce:	4b b3       	in	r20, 0x1b	; 27
 2d0:	4c 27       	eor	r20, r28
 2d2:	4b bb       	out	0x1b, r20	; 27
													goto LOOP;
 2d4:	b2 cf       	rjmp	.-156    	; 0x23a <main+0xbc>
												}
												
												else
												if (data_main == 0x0A)
												{
													z=1;
 2d6:	50 93 64 00 	sts	0x0064, r21
													speed[0]=1;
 2da:	5c 93       	st	X, r21
													goto LOOP;
 2dc:	ae cf       	rjmp	.-164    	; 0x23a <main+0xbc>
												}
												
												else
												if (data_main == 0xA0)
												{
													z=1;
 2de:	50 93 64 00 	sts	0x0064, r21
													speed[1]=1;
 2e2:	e3 e6       	ldi	r30, 0x63	; 99
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	50 83       	st	Z, r21
													goto LOOP;
 2e8:	a8 cf       	rjmp	.-176    	; 0x23a <main+0xbc>
												}
												
												else
												if (data_main == 0x0B)
												{
													z=1;
 2ea:	50 93 64 00 	sts	0x0064, r21
													intensity[0]=1;
 2ee:	fc 01       	movw	r30, r24
 2f0:	50 83       	st	Z, r21
													goto LOOP;
 2f2:	a3 cf       	rjmp	.-186    	; 0x23a <main+0xbc>
												}
												
												else
												if (data_main == 0xB0)
												{
													z=1;
 2f4:	50 93 64 00 	sts	0x0064, r21
													intensity[1]=1;
 2f8:	f9 01       	movw	r30, r18
 2fa:	50 83       	st	Z, r21
													goto LOOP;
 2fc:	9e cf       	rjmp	.-196    	; 0x23a <main+0xbc>
										}
									}
								}
							}
							else
							if (data1==0xAA)
 2fe:	4a 3a       	cpi	r20, 0xAA	; 170
 300:	09 f0       	breq	.+2      	; 0x304 <main+0x186>
 302:	9b cf       	rjmp	.-202    	; 0x23a <main+0xbc>
							{
								while (! (UCSRA & (1 << RXC)) );
 304:	5f 9b       	sbis	0x0b, 7	; 11
 306:	fe cf       	rjmp	.-4      	; 0x304 <main+0x186>
								data1 = UDR;
 308:	4c b1       	in	r20, 0x0c	; 12
 30a:	40 93 66 00 	sts	0x0066, r20
							
								if (data1==0xBB)
 30e:	4b 3b       	cpi	r20, 0xBB	; 187
 310:	09 f0       	breq	.+2      	; 0x314 <main+0x196>
 312:	93 cf       	rjmp	.-218    	; 0x23a <main+0xbc>
								{
									PORTA = (1<<PINA6);
 314:	7b bb       	out	0x1b, r23	; 27
 316:	91 cf       	rjmp	.-222    	; 0x23a <main+0xbc>
 318:	ff cf       	rjmp	.-2      	; 0x318 <main+0x19a>

0000031a <__vector_2>:
		}			
	}
}

ISR(INT1_vect)
{
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	8f 93       	push	r24
 328:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	26 ea       	ldi	r18, 0xA6	; 166
 32c:	2a 95       	dec	r18
 32e:	f1 f7       	brne	.-4      	; 0x32c <__vector_2+0x12>
 330:	00 c0       	rjmp	.+0      	; 0x332 <__vector_2+0x18>
	_delay_us(500);
	if (z==1)
 332:	80 91 64 00 	lds	r24, 0x0064
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	09 f0       	breq	.+2      	; 0x33c <__vector_2+0x22>
 33a:	64 c0       	rjmp	.+200    	; 0x404 <__vector_2+0xea>
	{
		z=0;
 33c:	10 92 64 00 	sts	0x0064, r1
		
		if (speed[0]==1)
 340:	80 91 62 00 	lds	r24, 0x0062
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	a1 f4       	brne	.+40     	; 0x370 <__vector_2+0x56>
		{
			speed[0]=0;
 348:	10 92 62 00 	sts	0x0062, r1
			OCR1A=OCR1A-2000;
 34c:	8a b5       	in	r24, 0x2a	; 42
 34e:	9b b5       	in	r25, 0x2b	; 43
 350:	80 5d       	subi	r24, 0xD0	; 208
 352:	97 40       	sbci	r25, 0x07	; 7
 354:	9b bd       	out	0x2b, r25	; 43
 356:	8a bd       	out	0x2a, r24	; 42
			if(OCR1A<1)
 358:	8a b5       	in	r24, 0x2a	; 42
 35a:	9b b5       	in	r25, 0x2b	; 43
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	09 f0       	breq	.+2      	; 0x362 <__vector_2+0x48>
 360:	51 c0       	rjmp	.+162    	; 0x404 <__vector_2+0xea>
			{
				OCR1A=OCR1A+2000;
 362:	8a b5       	in	r24, 0x2a	; 42
 364:	9b b5       	in	r25, 0x2b	; 43
 366:	80 53       	subi	r24, 0x30	; 48
 368:	98 4f       	sbci	r25, 0xF8	; 248
 36a:	9b bd       	out	0x2b, r25	; 43
 36c:	8a bd       	out	0x2a, r24	; 42
 36e:	4a c0       	rjmp	.+148    	; 0x404 <__vector_2+0xea>
			}
		}
		
		else
		if (speed[1]==1)
 370:	80 91 63 00 	lds	r24, 0x0063
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	a9 f4       	brne	.+42     	; 0x3a2 <__vector_2+0x88>
		{
			speed[1]=0;
 378:	10 92 63 00 	sts	0x0063, r1
			OCR1A=OCR1A+2000;
 37c:	8a b5       	in	r24, 0x2a	; 42
 37e:	9b b5       	in	r25, 0x2b	; 43
 380:	80 53       	subi	r24, 0x30	; 48
 382:	98 4f       	sbci	r25, 0xF8	; 248
 384:	9b bd       	out	0x2b, r25	; 43
 386:	8a bd       	out	0x2a, r24	; 42
			if(OCR1A>10001)
 388:	8a b5       	in	r24, 0x2a	; 42
 38a:	9b b5       	in	r25, 0x2b	; 43
 38c:	27 e2       	ldi	r18, 0x27	; 39
 38e:	82 31       	cpi	r24, 0x12	; 18
 390:	92 07       	cpc	r25, r18
 392:	c0 f1       	brcs	.+112    	; 0x404 <__vector_2+0xea>
			{
				OCR1A=OCR1A-2000;
 394:	8a b5       	in	r24, 0x2a	; 42
 396:	9b b5       	in	r25, 0x2b	; 43
 398:	80 5d       	subi	r24, 0xD0	; 208
 39a:	97 40       	sbci	r25, 0x07	; 7
 39c:	9b bd       	out	0x2b, r25	; 43
 39e:	8a bd       	out	0x2a, r24	; 42
 3a0:	31 c0       	rjmp	.+98     	; 0x404 <__vector_2+0xea>
			}
		}
		
		else
		if (intensity[0]==1)
 3a2:	80 91 60 00 	lds	r24, 0x0060
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	a9 f4       	brne	.+42     	; 0x3d4 <__vector_2+0xba>
		{
			intensity[0]=0;
 3aa:	10 92 60 00 	sts	0x0060, r1
			OCR1B=OCR1B-2000;
 3ae:	88 b5       	in	r24, 0x28	; 40
 3b0:	99 b5       	in	r25, 0x29	; 41
 3b2:	80 5d       	subi	r24, 0xD0	; 208
 3b4:	97 40       	sbci	r25, 0x07	; 7
 3b6:	99 bd       	out	0x29, r25	; 41
 3b8:	88 bd       	out	0x28, r24	; 40
			if(OCR1B>10001)
 3ba:	88 b5       	in	r24, 0x28	; 40
 3bc:	99 b5       	in	r25, 0x29	; 41
 3be:	27 e2       	ldi	r18, 0x27	; 39
 3c0:	82 31       	cpi	r24, 0x12	; 18
 3c2:	92 07       	cpc	r25, r18
 3c4:	f8 f0       	brcs	.+62     	; 0x404 <__vector_2+0xea>
			{
				OCR1B=OCR1B+2000;
 3c6:	88 b5       	in	r24, 0x28	; 40
 3c8:	99 b5       	in	r25, 0x29	; 41
 3ca:	80 53       	subi	r24, 0x30	; 48
 3cc:	98 4f       	sbci	r25, 0xF8	; 248
 3ce:	99 bd       	out	0x29, r25	; 41
 3d0:	88 bd       	out	0x28, r24	; 40
 3d2:	18 c0       	rjmp	.+48     	; 0x404 <__vector_2+0xea>
			}
		}
		
		else
		if (intensity[1]==1)
 3d4:	80 91 61 00 	lds	r24, 0x0061
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	a1 f4       	brne	.+40     	; 0x404 <__vector_2+0xea>
		{
			intensity[1]=0;
 3dc:	10 92 61 00 	sts	0x0061, r1
			OCR1B=OCR1B+2000;
 3e0:	88 b5       	in	r24, 0x28	; 40
 3e2:	99 b5       	in	r25, 0x29	; 41
 3e4:	80 53       	subi	r24, 0x30	; 48
 3e6:	98 4f       	sbci	r25, 0xF8	; 248
 3e8:	99 bd       	out	0x29, r25	; 41
 3ea:	88 bd       	out	0x28, r24	; 40
			if(OCR1B>10001)
 3ec:	88 b5       	in	r24, 0x28	; 40
 3ee:	99 b5       	in	r25, 0x29	; 41
 3f0:	27 e2       	ldi	r18, 0x27	; 39
 3f2:	82 31       	cpi	r24, 0x12	; 18
 3f4:	92 07       	cpc	r25, r18
 3f6:	30 f0       	brcs	.+12     	; 0x404 <__vector_2+0xea>
			{
				OCR1B=OCR1B-2000;
 3f8:	88 b5       	in	r24, 0x28	; 40
 3fa:	99 b5       	in	r25, 0x29	; 41
 3fc:	80 5d       	subi	r24, 0xD0	; 208
 3fe:	97 40       	sbci	r25, 0x07	; 7
 400:	99 bd       	out	0x29, r25	; 41
 402:	88 bd       	out	0x28, r24	; 40
			}
		}
	}
	
	TCNT1=19998;
 404:	8e e1       	ldi	r24, 0x1E	; 30
 406:	9e e4       	ldi	r25, 0x4E	; 78
 408:	9d bd       	out	0x2d, r25	; 45
 40a:	8c bd       	out	0x2c, r24	; 44
}
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	2f 91       	pop	r18
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

0000041c <__floatunsisf>:
 41c:	e8 94       	clt
 41e:	09 c0       	rjmp	.+18     	; 0x432 <__floatsisf+0x12>

00000420 <__floatsisf>:
 420:	97 fb       	bst	r25, 7
 422:	3e f4       	brtc	.+14     	; 0x432 <__floatsisf+0x12>
 424:	90 95       	com	r25
 426:	80 95       	com	r24
 428:	70 95       	com	r23
 42a:	61 95       	neg	r22
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	8f 4f       	sbci	r24, 0xFF	; 255
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	99 23       	and	r25, r25
 434:	a9 f0       	breq	.+42     	; 0x460 <__floatsisf+0x40>
 436:	f9 2f       	mov	r31, r25
 438:	96 e9       	ldi	r25, 0x96	; 150
 43a:	bb 27       	eor	r27, r27
 43c:	93 95       	inc	r25
 43e:	f6 95       	lsr	r31
 440:	87 95       	ror	r24
 442:	77 95       	ror	r23
 444:	67 95       	ror	r22
 446:	b7 95       	ror	r27
 448:	f1 11       	cpse	r31, r1
 44a:	f8 cf       	rjmp	.-16     	; 0x43c <__floatsisf+0x1c>
 44c:	fa f4       	brpl	.+62     	; 0x48c <__floatsisf+0x6c>
 44e:	bb 0f       	add	r27, r27
 450:	11 f4       	brne	.+4      	; 0x456 <__floatsisf+0x36>
 452:	60 ff       	sbrs	r22, 0
 454:	1b c0       	rjmp	.+54     	; 0x48c <__floatsisf+0x6c>
 456:	6f 5f       	subi	r22, 0xFF	; 255
 458:	7f 4f       	sbci	r23, 0xFF	; 255
 45a:	8f 4f       	sbci	r24, 0xFF	; 255
 45c:	9f 4f       	sbci	r25, 0xFF	; 255
 45e:	16 c0       	rjmp	.+44     	; 0x48c <__floatsisf+0x6c>
 460:	88 23       	and	r24, r24
 462:	11 f0       	breq	.+4      	; 0x468 <__floatsisf+0x48>
 464:	96 e9       	ldi	r25, 0x96	; 150
 466:	11 c0       	rjmp	.+34     	; 0x48a <__floatsisf+0x6a>
 468:	77 23       	and	r23, r23
 46a:	21 f0       	breq	.+8      	; 0x474 <__floatsisf+0x54>
 46c:	9e e8       	ldi	r25, 0x8E	; 142
 46e:	87 2f       	mov	r24, r23
 470:	76 2f       	mov	r23, r22
 472:	05 c0       	rjmp	.+10     	; 0x47e <__floatsisf+0x5e>
 474:	66 23       	and	r22, r22
 476:	71 f0       	breq	.+28     	; 0x494 <__floatsisf+0x74>
 478:	96 e8       	ldi	r25, 0x86	; 134
 47a:	86 2f       	mov	r24, r22
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	2a f0       	brmi	.+10     	; 0x48c <__floatsisf+0x6c>
 482:	9a 95       	dec	r25
 484:	66 0f       	add	r22, r22
 486:	77 1f       	adc	r23, r23
 488:	88 1f       	adc	r24, r24
 48a:	da f7       	brpl	.-10     	; 0x482 <__floatsisf+0x62>
 48c:	88 0f       	add	r24, r24
 48e:	96 95       	lsr	r25
 490:	87 95       	ror	r24
 492:	97 f9       	bld	r25, 7
 494:	08 95       	ret

00000496 <lrint>:
 496:	41 d0       	rcall	.+130    	; 0x51a <__fp_splitA>
 498:	a8 f1       	brcs	.+106    	; 0x504 <lrint+0x6e>
 49a:	9e 57       	subi	r25, 0x7E	; 126
 49c:	a8 f1       	brcs	.+106    	; 0x508 <lrint+0x72>
 49e:	98 51       	subi	r25, 0x18	; 24
 4a0:	60 f0       	brcs	.+24     	; 0x4ba <lrint+0x24>
 4a2:	39 f1       	breq	.+78     	; 0x4f2 <lrint+0x5c>
 4a4:	98 30       	cpi	r25, 0x08	; 8
 4a6:	70 f5       	brcc	.+92     	; 0x504 <lrint+0x6e>
 4a8:	09 2e       	mov	r0, r25
 4aa:	99 27       	eor	r25, r25
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	0a 94       	dec	r0
 4b6:	d1 f7       	brne	.-12     	; 0x4ac <lrint+0x16>
 4b8:	1c c0       	rjmp	.+56     	; 0x4f2 <lrint+0x5c>
 4ba:	bb 27       	eor	r27, r27
 4bc:	99 3f       	cpi	r25, 0xF9	; 249
 4be:	4c f4       	brge	.+18     	; 0x4d2 <lrint+0x3c>
 4c0:	b1 11       	cpse	r27, r1
 4c2:	b1 e0       	ldi	r27, 0x01	; 1
 4c4:	b6 2b       	or	r27, r22
 4c6:	67 2f       	mov	r22, r23
 4c8:	78 2f       	mov	r23, r24
 4ca:	88 27       	eor	r24, r24
 4cc:	98 5f       	subi	r25, 0xF8	; 248
 4ce:	b1 f7       	brne	.-20     	; 0x4bc <lrint+0x26>
 4d0:	08 c0       	rjmp	.+16     	; 0x4e2 <lrint+0x4c>
 4d2:	86 95       	lsr	r24
 4d4:	77 95       	ror	r23
 4d6:	67 95       	ror	r22
 4d8:	b7 95       	ror	r27
 4da:	08 f4       	brcc	.+2      	; 0x4de <lrint+0x48>
 4dc:	b1 60       	ori	r27, 0x01	; 1
 4de:	93 95       	inc	r25
 4e0:	c1 f7       	brne	.-16     	; 0x4d2 <lrint+0x3c>
 4e2:	bb 0f       	add	r27, r27
 4e4:	30 f4       	brcc	.+12     	; 0x4f2 <lrint+0x5c>
 4e6:	11 f4       	brne	.+4      	; 0x4ec <lrint+0x56>
 4e8:	60 ff       	sbrs	r22, 0
 4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <lrint+0x5c>
 4ec:	6f 5f       	subi	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	8f 4f       	sbci	r24, 0xFF	; 255
 4f2:	3e f4       	brtc	.+14     	; 0x502 <lrint+0x6c>
 4f4:	90 95       	com	r25
 4f6:	80 95       	com	r24
 4f8:	70 95       	com	r23
 4fa:	61 95       	neg	r22
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	8f 4f       	sbci	r24, 0xFF	; 255
 500:	9f 4f       	sbci	r25, 0xFF	; 255
 502:	08 95       	ret
 504:	68 94       	set
 506:	24 c0       	rjmp	.+72     	; 0x550 <__fp_szero>
 508:	22 c0       	rjmp	.+68     	; 0x54e <__fp_zero>

0000050a <__fp_split3>:
 50a:	57 fd       	sbrc	r21, 7
 50c:	90 58       	subi	r25, 0x80	; 128
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	59 f0       	breq	.+22     	; 0x52a <__fp_splitA+0x10>
 514:	5f 3f       	cpi	r21, 0xFF	; 255
 516:	71 f0       	breq	.+28     	; 0x534 <__fp_splitA+0x1a>
 518:	47 95       	ror	r20

0000051a <__fp_splitA>:
 51a:	88 0f       	add	r24, r24
 51c:	97 fb       	bst	r25, 7
 51e:	99 1f       	adc	r25, r25
 520:	61 f0       	breq	.+24     	; 0x53a <__fp_splitA+0x20>
 522:	9f 3f       	cpi	r25, 0xFF	; 255
 524:	79 f0       	breq	.+30     	; 0x544 <__fp_splitA+0x2a>
 526:	87 95       	ror	r24
 528:	08 95       	ret
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	14 06       	cpc	r1, r20
 530:	55 1f       	adc	r21, r21
 532:	f2 cf       	rjmp	.-28     	; 0x518 <__fp_split3+0xe>
 534:	46 95       	lsr	r20
 536:	f1 df       	rcall	.-30     	; 0x51a <__fp_splitA>
 538:	08 c0       	rjmp	.+16     	; 0x54a <__fp_splitA+0x30>
 53a:	16 16       	cp	r1, r22
 53c:	17 06       	cpc	r1, r23
 53e:	18 06       	cpc	r1, r24
 540:	99 1f       	adc	r25, r25
 542:	f1 cf       	rjmp	.-30     	; 0x526 <__fp_splitA+0xc>
 544:	86 95       	lsr	r24
 546:	71 05       	cpc	r23, r1
 548:	61 05       	cpc	r22, r1
 54a:	08 94       	sec
 54c:	08 95       	ret

0000054e <__fp_zero>:
 54e:	e8 94       	clt

00000550 <__fp_szero>:
 550:	bb 27       	eor	r27, r27
 552:	66 27       	eor	r22, r22
 554:	77 27       	eor	r23, r23
 556:	cb 01       	movw	r24, r22
 558:	97 f9       	bld	r25, 7
 55a:	08 95       	ret

0000055c <__udivmodsi4>:
 55c:	a1 e2       	ldi	r26, 0x21	; 33
 55e:	1a 2e       	mov	r1, r26
 560:	aa 1b       	sub	r26, r26
 562:	bb 1b       	sub	r27, r27
 564:	fd 01       	movw	r30, r26
 566:	0d c0       	rjmp	.+26     	; 0x582 <__udivmodsi4_ep>

00000568 <__udivmodsi4_loop>:
 568:	aa 1f       	adc	r26, r26
 56a:	bb 1f       	adc	r27, r27
 56c:	ee 1f       	adc	r30, r30
 56e:	ff 1f       	adc	r31, r31
 570:	a2 17       	cp	r26, r18
 572:	b3 07       	cpc	r27, r19
 574:	e4 07       	cpc	r30, r20
 576:	f5 07       	cpc	r31, r21
 578:	20 f0       	brcs	.+8      	; 0x582 <__udivmodsi4_ep>
 57a:	a2 1b       	sub	r26, r18
 57c:	b3 0b       	sbc	r27, r19
 57e:	e4 0b       	sbc	r30, r20
 580:	f5 0b       	sbc	r31, r21

00000582 <__udivmodsi4_ep>:
 582:	66 1f       	adc	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	88 1f       	adc	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	1a 94       	dec	r1
 58c:	69 f7       	brne	.-38     	; 0x568 <__udivmodsi4_loop>
 58e:	60 95       	com	r22
 590:	70 95       	com	r23
 592:	80 95       	com	r24
 594:	90 95       	com	r25
 596:	9b 01       	movw	r18, r22
 598:	ac 01       	movw	r20, r24
 59a:	bd 01       	movw	r22, r26
 59c:	cf 01       	movw	r24, r30
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
